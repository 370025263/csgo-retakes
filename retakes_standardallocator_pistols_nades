#include <sourcemod>
#include <cstrike>
#include <clientprefs>
#include "include/retakes.inc"
#include "retakes/generic.sp"

#pragma semicolon 1
#pragma newdecls required

#define MENU_TIME_LENGTH 15

int  g_Gunchoice[MAXPLAYERS+1];
Handle g_hGUNChoiceCookie = INVALID_HANDLE;

public Plugin myinfo = {
    name = "CS:GO Retakes: Pistols and nades",
    author = "splewis, BatMen, Ejz",
    description = "Defines a simple weapon allocation policy that gives Pistols and nades",
    version = PLUGIN_VERSION,
    url = "https://github.com/splewis/csgo-retakes"
};

public void OnPluginStart() {
    g_hGUNChoiceCookie = RegClientCookie("retakes_gunchoice", "", CookieAccess_Private);
}

public void OnClientConnected(int client) {
    g_Gunchoice[client] = 1;
}

public Action OnClientSayCommand(int client, const char[] command, const char[] args) {
    char gunsChatCommands[][] = { "gun", "guns", ".gun", ".guns", ".setup", "!gun", "!guns", "gnus" };
    for (int i = 0; i < sizeof(gunsChatCommands); i++) {
        if (strcmp(args[0], gunsChatCommands[i], false) == 0) {
            GiveGunMenu(client);
            break;
        }
    }

    return Plugin_Continue;
}

public void Retakes_OnWeaponsAllocated(ArrayList tPlayers, ArrayList ctPlayers, Bombsite bombsite) {
    RifleAllocator(tPlayers, ctPlayers, bombsite);
}

/**
 * Updates client weapon settings according to their cookies.
 */
public int OnClientCookiesCached(int client) {
    if (IsFakeClient(client))
        return;

    g_Gunchoice[client]  = GetCookieInt (client, g_hGUNChoiceCookie);
}

static void SetNades(char nades[NADE_STRING_LENGTH]) {
    int rand = GetRandomInt(0, 3);
    switch(rand) {
        case 0: nades = "";
        case 1: nades = "s";
        case 2: nades = "f";
        case 3: nades = "h";
    }
}

public void RifleAllocator(ArrayList tPlayers, ArrayList ctPlayers, Bombsite bombsite) {
    int tCount = GetArraySize(tPlayers);
    int ctCount = GetArraySize(ctPlayers);

    char primary[WEAPON_STRING_LENGTH];
    char secondary[WEAPON_STRING_LENGTH];
    char nades[NADE_STRING_LENGTH];
    int health = 100;
    int kevlar = 100;
    bool helmet = false;
    bool kit = true;

    for (int i = 0; i < tCount; i++) {
        int client = GetArrayCell(tPlayers, i);

         if (g_Gunchoice[client] == 1)
             secondary = "weapon_p250";
         else if (g_Gunchoice[client] == 2)
             secondary = "weapon_hkp2000";
		else if (g_Gunchoice[client] == 3)
             secondary = "weapon_usp_silencer";
		else if (g_Gunchoice[client] == 4)
             secondary = "weapon_deagle";
		else if (g_Gunchoice[client] == 5)
             secondary = "weapon_glock";
		else if (g_Gunchoice[client] == 6)
             secondary = "weapon_fiveseven";
         else
             secondary = "weapon_p250";

        health = 100;
        kevlar = 100;
        helmet = false;
        kit = false;
        SetNades(nades);

        Retakes_SetPlayerInfo(client, primary, secondary, nades, health, kevlar, helmet, kit);
    }

    for (int i = 0; i < ctCount; i++) {
        int client = GetArrayCell(ctPlayers, i);

         if (g_Gunchoice[client] == 1)
             secondary = "weapon_p250";
         else if (g_Gunchoice[client] == 2)
             secondary = "weapon_hkp2000";
		else if (g_Gunchoice[client] == 3)
             secondary = "weapon_usp_silencer";
		else if (g_Gunchoice[client] == 4)
             secondary = "weapon_deagle";
		else if (g_Gunchoice[client] == 5)
             secondary = "weapon_glock";
		else if (g_Gunchoice[client] == 6)
             secondary = "weapon_fiveseven";
         else
             secondary = "weapon_p250";

        kit = true;
        health = 100;
        kevlar = 100;
        helmet = false;
        SetNades(nades);

        Retakes_SetPlayerInfo(client, primary, secondary, nades, health, kevlar, helmet, kit);
    }
}

public void GiveGunMenu(int client) {
    Handle menu = CreateMenu(MenuHandler_GUN);
    SetMenuTitle(menu, "Select a gun slot :");
    AddMenuInt(menu, 1, "P250");
    AddMenuInt(menu, 2, "HKP2000");
    AddMenuInt(menu, 3, "USP-S");
	AddMenuInt(menu, 4, "Deagle");
	AddMenuInt(menu, 5, "Glock");
	AddMenuInt(menu, 6, "Fiveseven");
    DisplayMenu(menu, client, MENU_TIME_LENGTH);
}

public int MenuHandler_GUN(Handle menu, MenuAction action, int param1, int param2) {
    if (action == MenuAction_Select) {
        int client = param1;
        int gunchoice = GetMenuInt(menu, param2);
        g_Gunchoice[client] = gunchoice;
        SetCookieInt(client, g_hGUNChoiceCookie, gunchoice);
    } else if (action == MenuAction_End) {
        CloseHandle(menu);
    }
}
